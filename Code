/***************************************************

"  The Social Distancer 3000"

DFPlayer inform can be found
 - A Mini MP3 Player For Arduino
 <https://www.dfrobot.com/product-1121.html>

 Created 2024-11-25
 By Natalie Kordish

 This code powers the "Social Distancer 3000," a creative final project for my digital art class. 
 The Social Distancer 3000 is a whimsical invention: a hat equipped with HCSR04 ultrasonic sensors. 
 When an object or person comes within 40 cm of the sensors, they trigger the DFPlayer Mini to play 
 pre-selected audio tracks. These tracks deliver playful, humorous "insults" designed to humorously 
 maintain personal space boundaries.

 An important note for contents of the DFPlayer SD card: Please make sure that you have a folder 
 labeled "mp3" that contains the sound files you intend to use. 
 Label the sound files as follows: "0001", "0002", "0003", etc. 

 The project is purely for entertainment and is not intended to cause harm.  
 Have fun!


 ****************************************************/
 
 #include "Arduino.h"
#include "DFRobotDFPlayerMini.h"

#if (defined(ARDUINO_AVR_UNO) || defined(ESP8266))
#include <SoftwareSerial.h>
SoftwareSerial softSerial(/*rx =*/10, /*tx =*/11); // RX and TX connections
#define FPSerial softSerial
#else
#define FPSerial Serial1
#endif

DFRobotDFPlayerMini myDFPlayer;
void printDetail(uint8_t type, int value);

#include "SR04.h"
#define TRIG_PIN 2
#define ECHO_PIN 3
#define TRIG_PIN2 4
#define ECHO_PIN2 5
#define TRIG_PIN3 6
#define ECHO_PIN3 7
#define TRIG_PIN4 8
#define ECHO_PIN4 9
SR04 front = SR04(ECHO_PIN, TRIG_PIN);
SR04 back = SR04(ECHO_PIN2, TRIG_PIN2);
SR04 left = SR04(ECHO_PIN3, TRIG_PIN3);
SR04 right = SR04(ECHO_PIN4, TRIG_PIN4);
long a, b, c, d; // Sensor distances
bool isPlaying = false; // Tracks if a sound is playing

void setup()
{
#if (defined ESP32)
  FPSerial.begin(9600, SERIAL_8N1, /*rx =*/D3, /*tx =*/D2);
#else
  FPSerial.begin(9600);
#endif

  Serial.begin(115200);

  Serial.println(F("Initializing DFPlayer..."));
  if (!myDFPlayer.begin(FPSerial, true, true)) {
    Serial.println(F("Unable to initialize DFPlayer."));
    while (true) {
      delay(0);
    }
  }
  Serial.println(F("DFPlayer Mini online."));
  myDFPlayer.volume(30); // Set volume level (0-30)
}

void loop()
{
  static unsigned long timer = millis();

  if (millis() - timer > 3500) {
    a = front.Distance();
    b = back.Distance();
    c = left.Distance();
    d = right.Distance();

    Serial.print("Distances: Front=");
    Serial.print(a);
    Serial.print(" cm, Back=");
    Serial.print(b);
    Serial.print(" cm, Left=");
    Serial.print(c);
    Serial.print(" cm, Right=");
    Serial.println(d);

    timer = millis();

    if (!isPlaying) { // Check if sound is already playing
      if (a <= 40) {
        myDFPlayer.next();
        isPlaying = true;
      } else if (b <= 40) {
        myDFPlayer.next();
        isPlaying = true;
      } else if (c <= 40) {
        myDFPlayer.next();
        isPlaying = true;
      } else if (d <= 40) {
        myDFPlayer.next();
        isPlaying = true;
      }
    }
  }

  if (myDFPlayer.available()) {
    printDetail(myDFPlayer.readType(), myDFPlayer.read());
  }
}

void printDetail(uint8_t type, int value)
{
  switch (type) {
    case DFPlayerPlayFinished:
      Serial.print(F("Number:"));
      Serial.print(value);
      Serial.println(F(" Play Finished!"));
      isPlaying = false; // Reset when playback finishes
      break;
    case DFPlayerError:
      Serial.print(F("DFPlayerError:"));
      switch (value) {
        case Busy:
          Serial.println(F("Card not found"));
          break;
        case Sleeping:
          Serial.println(F("Sleeping"));
          break;
        case SerialWrongStack:
          Serial.println(F("Get Wrong Stack"));
          break;
        case CheckSumNotMatch:
          Serial.println(F("Check Sum Not Match"));
          break;
        case FileIndexOut:
          Serial.println(F("File Index Out of Bound"));
          break;
        case FileMismatch:
          Serial.println(F("Cannot Find File"));
          break;
        case Advertise:
          Serial.println(F("In Advertise"));
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }
}
