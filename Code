
/***************************************************

"  The Social Distancer 3000"

DFPlayer inform can be found
 - A Mini MP3 Player For Arduino
 <https://www.dfrobot.com/product-1121.html>

 Created 2024-11-25
 By Natalie Kordish

 This code powers the "Social Distancer 3000," a creative final project for my digital art class. 
 The Social Distancer 3000 is a whimsical invention: a hat equipped with HCSR04 ultrasonic sensors. 
 When an object or person comes within 40 cm of the sensors, they trigger the DFPlayer Mini to play 
 pre-selected audio tracks. These tracks deliver playful, humorous "insults" designed to humorously 
 maintain personal space boundaries.

 An important note for contents of the DFPlayer SD card: Please make sure that you have a folder 
 labeled "mp3" that contains the sound files you intend to use. 
 Label the sound files as follows: "0001", "0002", "0003", etc. 

 The project is purely for entertainment and is not intended to cause harm. The code is nearly complete;
 I’ve successfully integrated functionality for both the DFPlayer Mini and the HCSR04 sensors. 
 However, I’m working on refining it to prevent audio overlap when an object remains in the sensor's
 range for an extended period. Suggestions for improving this functionality are highly appreciated. 
  Have fun!


 ****************************************************/

#include "Arduino.h"
#include "DFRobotDFPlayerMini.h"

#if (defined(ARDUINO_AVR_UNO) || defined(ESP8266))   // Using a soft serial port
#include <SoftwareSerial.h>
SoftwareSerial softSerial(/*rx =*/10, /*tx =*/11); // RX and TX connections
#define FPSerial softSerial
#else
#define FPSerial Serial1
#endif


DFRobotDFPlayerMini myDFPlayer;
void printDetail(uint8_t type, int value);  // DFPlayer mini functionality - pulled from DF Robot site

//globals for SR04 - pulled from SR04 example sketch and modified to fit multiple sensors running at same time
#include "SR04.h"
#define TRIG_PIN 2
#define ECHO_PIN 3
#define TRIG_PIN2 4
#define ECHO_PIN2 5
#define TRIG_PIN3 6
#define ECHO_PIN3 7
#define TRIG_PIN4 8
#define ECHO_PIN4 9
SR04 front = SR04(ECHO_PIN,TRIG_PIN);  // front sensor
SR04 back = SR04(ECHO_PIN2, TRIG_PIN2);  // back sensor
SR04 left = SR04(ECHO_PIN3, TRIG_PIN3);  // left sensor
SR04 right = SR04(ECHO_PIN4, TRIG_PIN4);  // right sensor
long a; // front distance
long b; // back distance
long c; // left distance
long d; // right distance
//end globals for SR04



void setup() // set up functions for DFPlayer Mini with error code
{
#if (defined ESP32)
  FPSerial.begin(9600, SERIAL_8N1, /*rx =*/D3, /*tx =*/D2);
#else
  FPSerial.begin(9600);
#endif

  Serial.begin(115200);

  Serial.println();
  Serial.println(F("DFRobot DFPlayer Mini Demo"));
  Serial.println(F("Initializing DFPlayer ... (May take 3~5 seconds)"));

  if (!myDFPlayer.begin(FPSerial, /*isACK = */true, /*doReset = */true)) {  //Use serial to communicate with mp3.
    Serial.println(F("Unable to begin:"));
    Serial.println(F("1.Please recheck the connection!"));
    Serial.println(F("2.Please insert the SD card!"));
    while(true){
      delay(0); // Code to compatible with ESP8266 watch dog.
    }
  }
  Serial.println(F("DFPlayer Mini online."));

  myDFPlayer.volume(30);  //Set volume value. From 0 to 30
  
}

void loop()
{
  static unsigned long timer = millis();

  if (millis() - timer > 3500) {   
  a=front.Distance(); 
  b=back.Distance();
  c=left.Distance();
  d=right.Distance();
   
   Serial.println("Distance front: ");
   Serial.print(a);
 Serial.print(" cm, Distance back: ");
  Serial.print(b);
  Serial.print(" cm, Distance left: ");
  Serial.print(c);
  Serial.print(" cm, Distance right: ");
  Serial.println(d);
   delay(500);

    timer = millis();
    if (a<= 40) {

myDFPlayer.next();  //Play next mp3
    }
timer = millis();
    if (b<= 40) {

myDFPlayer.next();  //Play next mp3
    }
    timer = millis();
    if (c<= 40) {

myDFPlayer.next();  //Play next mp3
    }
timer = millis();
    if (d<= 40) {

myDFPlayer.next();  //Play next mp3
    }

  }

  if (myDFPlayer.available()) {
    printDetail(myDFPlayer.readType(), myDFPlayer.read()); //Print the detail message from DFPlayer to handle different errors and states.
  }
}

void printDetail(uint8_t type, int value){ // additional error codes
  switch (type) {
    case TimeOut:
      Serial.println(F("Time Out!"));
      break;
    case WrongStack:
      Serial.println(F("Stack Wrong!"));
      break;
    case DFPlayerCardInserted:
      Serial.println(F("Card Inserted!"));
      break;
    case DFPlayerCardRemoved:
      Serial.println(F("Card Removed!"));
      break;
    case DFPlayerCardOnline:
      Serial.println(F("Card Online!"));
      break;
    case DFPlayerUSBInserted:
      Serial.println("USB Inserted!");
      break;
    case DFPlayerUSBRemoved:
      Serial.println("USB Removed!");
      break;
    case DFPlayerPlayFinished:
      Serial.print(F("Number:"));
      Serial.print(value);
      Serial.println(F(" Play Finished!"));
      break;
    case DFPlayerError:
      Serial.print(F("DFPlayerError:"));
      switch (value) {
        case Busy:
          Serial.println(F("Card not found"));
          break;
        case Sleeping:
          Serial.println(F("Sleeping"));
          break;
        case SerialWrongStack:
          Serial.println(F("Get Wrong Stack"));
          break;
        case CheckSumNotMatch:
          Serial.println(F("Check Sum Not Match"));
          break;
        case FileIndexOut:
          Serial.println(F("File Index Out of Bound"));
          break;
        case FileMismatch:
          Serial.println(F("Cannot Find File"));
          break;
        case Advertise:
          Serial.println(F("In Advertise"));
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }

}
